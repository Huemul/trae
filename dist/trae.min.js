!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("trae",[],e):"object"==typeof exports?exports.trae=e():t.trae=e()}(this,function(){return function(t){function e(n){if(r[n])return r[n].exports;var o=r[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var r={};return e.m=t,e.c=r,e.p="",e(0)}([function(t,e,r){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();r(1);var i=r(2).buildQuery,s=r(5),a=r(6),u=r(7).skip,f=r(10),c=r(11),l=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};n(this,t),this._middleware=new s,this._config=new a(u(e,["baseUrl"])),this.baseUrl(e.baseUrl||""),this._initMethodsWithBody(),this._initMethodsWithNoBody()}return o(t,[{key:"create",value:function(t){return new this.constructor(t)}},{key:"use",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};t.config&&this._middleware.request(t.config),(t.fulfill||t.reject)&&this._middleware.response(t.fulfill,t.reject)}},{key:"defaults",value:function(t){return"undefined"==typeof t?this._config.get():(this._config.set(u(t,["baseUrl"])),t.baseUrl&&this.baseUrl(t.baseUrl),this._config.get())}},{key:"baseUrl",value:function(t){return"undefined"==typeof t?this._baseUrl:(this._baseUrl=t,this._baseUrl)}},{key:"request",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};t.method||(t.method="get");var e=this._config.mergeWithDefaults(t),r=i(f.format(this._baseUrl,t.url),t.params);return this._fetch(r,e)}},{key:"_fetch",value:function(t,e){var r=this;return this._middleware.resolveRequests(e).then(function(e){return fetch(t,e)}).then(function(t){return c(t,e.bodyType)}).then(function(t){return r._middleware.resolveResponses(t)})}},{key:"_initMethodsWithNoBody",value:function(){var t=this;["get","delete","head"].forEach(function(e){t[e]=function(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t._config.mergeWithDefaults(n,{method:e}),s=i(f.format(t._baseUrl,r),n.params);return t._fetch(s,o)}})}},{key:"_initMethodsWithBody",value:function(){var t=this;["post","put","patch"].forEach(function(e){t[e]=function(r,n,o){var i=t._config.mergeWithDefaults(o,{body:n,method:e}),s=f.format(t._baseUrl,r);return t._fetch(s,i)}})}}]),t}();t.exports=new l},function(t,e){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function r(t){return"string"!=typeof t&&(t=String(t)),t}function n(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return y.iterable&&(e[Symbol.iterator]=function(){return e}),e}function o(t){this.map={},t instanceof o?t.forEach(function(t,e){this.append(e,t)},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function i(t){return t.bodyUsed?Promise.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function s(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function a(t){var e=new FileReader;return e.readAsArrayBuffer(t),s(e)}function u(t){var e=new FileReader;return e.readAsText(t),s(e)}function f(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(y.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(y.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(y.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(t){if(!y.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t))throw new Error("unsupported BodyInit type")}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):y.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},y.blob?(this.blob=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(a)},this.text=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return u(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):this.text=function(){var t=i(this);return t?t:Promise.resolve(this._bodyText)},y.formData&&(this.formData=function(){return this.text().then(h)}),this.json=function(){return this.text().then(JSON.parse)},this}function c(t){var e=t.toUpperCase();return b.indexOf(e)>-1?e:t}function l(t,e){e=e||{};var r=e.body;if(l.prototype.isPrototypeOf(t)){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new o(t.headers)),this.method=t.method,this.mode=t.mode,r||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=t;if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new o(e.headers)),this.method=c(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function h(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}}),e}function p(t){var e=new o,r=(t.getAllResponseHeaders()||"").trim().split("\n");return r.forEach(function(t){var r=t.trim().split(":"),n=r.shift().trim(),o=r.join(":").trim();e.append(n,o)}),e}function d(t,e){e||(e={}),this.type="default",this.status=e.status,this.ok=this.status>=200&&this.status<300,this.statusText=e.statusText,this.headers=e.headers instanceof o?e.headers:new o(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var y={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};o.prototype.append=function(t,n){t=e(t),n=r(n);var o=this.map[t];o||(o=[],this.map[t]=o),o.push(n)},o.prototype.delete=function(t){delete this.map[e(t)]},o.prototype.get=function(t){var r=this.map[e(t)];return r?r[0]:null},o.prototype.getAll=function(t){return this.map[e(t)]||[]},o.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},o.prototype.set=function(t,n){this.map[e(t)]=[r(n)]},o.prototype.forEach=function(t,e){Object.getOwnPropertyNames(this.map).forEach(function(r){this.map[r].forEach(function(n){t.call(e,n,r,this)},this)},this)},o.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),n(t)},o.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),n(t)},o.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),n(t)},y.iterable&&(o.prototype[Symbol.iterator]=o.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];l.prototype.clone=function(){return new l(this)},f.call(l.prototype),f.call(d.prototype),d.prototype.clone=function(){return new d(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new o(this.headers),url:this.url})},d.error=function(){var t=new d(null,{status:0,statusText:""});return t.type="error",t};var v=[301,302,303,307,308];d.redirect=function(t,e){if(v.indexOf(e)===-1)throw new RangeError("Invalid status code");return new d(null,{status:e,headers:{location:t}})},t.Headers=o,t.Request=l,t.Response=d,t.fetch=function(t,e){return new Promise(function(r,n){function o(){return"responseURL"in s?s.responseURL:/^X-Request-URL:/m.test(s.getAllResponseHeaders())?s.getResponseHeader("X-Request-URL"):void 0}var i;i=l.prototype.isPrototypeOf(t)&&!e?t:new l(t,e);var s=new XMLHttpRequest;s.onload=function(){var t={status:s.status,statusText:s.statusText,headers:p(s),url:o()},e="response"in s?s.response:s.responseText;r(new d(e,t))},s.onerror=function(){n(new TypeError("Network request failed"))},s.ontimeout=function(){n(new TypeError("Network request failed"))},s.open(i.method,i.url,!0),"include"===i.credentials&&(s.withCredentials=!0),"responseType"in s&&y.blob&&(s.responseType="blob"),i.headers.forEach(function(t,e){s.setRequestHeader(e,t)}),s.send("undefined"==typeof i._bodyInit?null:i._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},function(t,e,r){"use strict";var n=r(3),o=r(4);t.exports={buildQuery:n,parseQuery:o}},function(t,e){"use strict";function r(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=Object.keys(e);return 0===r.length?t:t+encodeURI(r.reduce(function(t,r){return t+"&"+r+"="+(e[r]||"")},"?").replace("?&","?"))}t.exports=r},function(t,e){"use strict";function r(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(!t.includes("?"))return{};var e={},r=decodeURI(t).split("?"),i=o(r,2),s=i[1],a=s.split("&");return a.forEach(function(t){var r=t.split("="),i=o(r,2),s=i[0],a=i[1];e[s]=n(a)}),e}function n(t){if(""!==t){if("true"===t)return!0;if("false"===t)return!1;var e=parseFloat(t);return Number.isNaN(e)||e!=t?t:e}}var o=function(){function t(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{!n&&a.return&&a.return()}finally{if(o)throw i}}return r}return function(e,r){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.exports=r},function(t,e){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),o=function(t){return t},i=function(t){return Promise.reject(t)},s=function(){function t(){r(this,t),this._req=[],this._res=[]}return n(t,[{key:"request",value:function(t){return this._req.push(t),this._req.length-1}},{key:"response",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return this._res.push({fulfill:t,reject:e}),this._res.length-1}},{key:"resolveRequests",value:function(t){return this._req.reduce(function(t,e){return t=t.then(e)},Promise.resolve(t))}},{key:"resolveResponses",value:function(t){return this._res.reduce(function(t,e){return t=t.then(e.fulfill,e.reject)},Promise.resolve(t))}}]),t}();t.exports=s},function(t,e,r){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),s=r(7).merge,a={Accept:"application/json, text/plain, */*","Content-Type":"application/json"},u={xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN"},f=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};n(this,t),this._defaults=s(u,{headers:a}),this._config={},this.set(e)}return i(t,[{key:"mergeWithDefaults",value:function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];var n=s.apply(void 0,[this._defaults,this._config].concat(e));return"object"===o(n.body)&&n.headers&&"application/json"===n.headers["Content-Type"]&&(n.body=JSON.stringify(n.body)),n}},{key:"set",value:function(t){this._config=s(this._config,t)}},{key:"get",value:function(){return s(this._defaults,this._config)}}]),t}();t.exports=f},function(t,e,r){"use strict";function n(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return i.apply(void 0,[!0].concat(e))}function o(t,e){var r={};return Object.keys(t).forEach(function(n){e.indexOf(n)===-1&&(r[n]=t[n])}),r}var i=r(8).recursive;t.exports={merge:n,skip:o}},function(t,e,r){(function(t){!function(e){function r(t,e){if("object"!==o(t))return e;for(var n in e)"object"===o(t[n])&&"object"===o(e[n])?t[n]=r(t[n],e[n]):t[n]=e[n];return t}function n(t,e,n){var s=n[0],a=n.length;(t||"object"!==o(s))&&(s={});for(var u=0;u<a;++u){var f=n[u],c=o(f);if("object"===c)for(var l in f){var h=t?i.clone(f[l]):f[l];e?s[l]=r(s[l],h):s[l]=h}}return s}function o(t){return{}.toString.call(t).slice(8,-1).toLowerCase()}var i=function(t){return n(t===!0,!1,arguments)},s="merge";i.recursive=function(t){return n(t===!0,!0,arguments)},i.clone=function(t){var e,r,n=t,s=o(t);if("array"===s)for(n=[],r=t.length,e=0;e<r;++e)n[e]=i.clone(t[e]);else if("object"===s){n={};for(e in t)n[e]=i.clone(t[e])}return n},e?t.exports=i:window[s]=i}("object"==typeof t&&t&&"object"==typeof t.exports&&t.exports)}).call(e,r(9)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){"use strict";function r(t,e){return t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,"")}function n(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}function o(t,e){return!t||n(e)?e:r(t,e)}t.exports={format:o,combine:r,isAbsolute:n}},function(t,e){"use strict";function r(t,e){return t[e]().then(function(e){return{headers:t.headers,status:t.status,statusText:t.statusText,data:e}})}function n(t,e){if(!t.ok){var n=new Error(t.statusText);return n.status=t.status,n.statusText=t.statusText,n.headers=t.headers,Promise.reject(n)}if(e)return r(t,e);var o=t.headers.get("Content-Type");return o&&o.includes("application/json")?r(t,"json"):r(t,"text")}t.exports=n}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,