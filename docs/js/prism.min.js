/* http://prismjs.com/download.html?themes=prism-okaidia&languages=markup+css+clike+javascript&plugins=line-numbers+toolbar+show-language+copy-to-clipboard */
var _self =
    'undefined' != typeof window
      ? window
      : 'undefined' != typeof WorkerGlobalScope &&
        self instanceof WorkerGlobalScope
        ? self
        : {},
  Prism = (function() {
    var e = /\blang(?:uage)?-(\w+)\b/i,
      t = 0,
      n = (_self.Prism = {
        util: {
          encode: function(e) {
            return e instanceof a
              ? new a(e.type, n.util.encode(e.content), e.alias)
              : 'Array' === n.util.type(e)
                ? e.map(n.util.encode)
                : e
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/\u00a0/g, ' ')
          },
          type: function(e) {
            return Object.prototype.toString
              .call(e)
              .match(/\[object (\w+)\]/)[1]
          },
          objId: function(e) {
            return (
              e.__id || Object.defineProperty(e, '__id', { value: ++t }), e.__id
            )
          },
          clone: function(e) {
            var t = n.util.type(e)
            switch (t) {
              case 'Object':
                var a = {}
                for (var r in e)
                  e.hasOwnProperty(r) && (a[r] = n.util.clone(e[r]))
                return a
              case 'Array':
                return (
                  e.map &&
                  e.map(function(e) {
                    return n.util.clone(e)
                  })
                )
            }
            return e
          },
        },
        languages: {
          extend: function(e, t) {
            var a = n.util.clone(n.languages[e])
            for (var r in t) a[r] = t[r]
            return a
          },
          insertBefore: function(e, t, a, r) {
            r = r || n.languages
            var i = r[e]
            if (2 == arguments.length) {
              a = arguments[1]
              for (var l in a) a.hasOwnProperty(l) && (i[l] = a[l])
              return i
            }
            var o = {}
            for (var s in i)
              if (i.hasOwnProperty(s)) {
                if (s == t)
                  for (var l in a) a.hasOwnProperty(l) && (o[l] = a[l])
                o[s] = i[s]
              }
            return (
              n.languages.DFS(n.languages, function(t, n) {
                n === r[e] && t != e && (this[t] = o)
              }),
              (r[e] = o)
            )
          },
          DFS: function(e, t, a, r) {
            r = r || {}
            for (var i in e)
              e.hasOwnProperty(i) &&
                (t.call(e, i, e[i], a || i),
                'Object' !== n.util.type(e[i]) || r[n.util.objId(e[i])]
                  ? 'Array' !== n.util.type(e[i]) ||
                    r[n.util.objId(e[i])] ||
                    ((r[n.util.objId(e[i])] = !0),
                    n.languages.DFS(e[i], t, i, r))
                  : ((r[n.util.objId(e[i])] = !0),
                    n.languages.DFS(e[i], t, null, r)))
          },
        },
        plugins: {},
        highlightAll: function(e, t) {
          var a = {
            callback: t,
            selector:
              'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code',
          }
          n.hooks.run('before-highlightall', a)
          for (
            var r,
              i = a.elements || document.querySelectorAll(a.selector),
              l = 0;
            (r = i[l++]);

          )
            n.highlightElement(r, e === !0, a.callback)
        },
        highlightElement: function(t, a, r) {
          for (var i, l, o = t; o && !e.test(o.className); ) o = o.parentNode
          o &&
            ((i = (o.className.match(e) || [, ''])[1].toLowerCase()),
            (l = n.languages[i])),
            (t.className =
              t.className.replace(e, '').replace(/\s+/g, ' ') +
              ' language-' +
              i),
            (o = t.parentNode),
            /pre/i.test(o.nodeName) &&
              (o.className =
                o.className.replace(e, '').replace(/\s+/g, ' ') +
                ' language-' +
                i)
          var s = t.textContent,
            u = { element: t, language: i, grammar: l, code: s }
          if ((n.hooks.run('before-sanity-check', u), !u.code || !u.grammar))
            return n.hooks.run('complete', u), void 0
          if ((n.hooks.run('before-highlight', u), a && _self.Worker)) {
            var g = new Worker(n.filename)
            ;(g.onmessage = function(e) {
              ;(u.highlightedCode = e.data),
                n.hooks.run('before-insert', u),
                (u.element.innerHTML = u.highlightedCode),
                r && r.call(u.element),
                n.hooks.run('after-highlight', u),
                n.hooks.run('complete', u)
            }),
              g.postMessage(
                JSON.stringify({
                  language: u.language,
                  code: u.code,
                  immediateClose: !0,
                }),
              )
          } else
            (u.highlightedCode = n.highlight(u.code, u.grammar, u.language)),
              n.hooks.run('before-insert', u),
              (u.element.innerHTML = u.highlightedCode),
              r && r.call(t),
              n.hooks.run('after-highlight', u),
              n.hooks.run('complete', u)
        },
        highlight: function(e, t, r) {
          var i = n.tokenize(e, t)
          return a.stringify(n.util.encode(i), r)
        },
        tokenize: function(e, t) {
          var a = n.Token,
            r = [e],
            i = t.rest
          if (i) {
            for (var l in i) t[l] = i[l]
            delete t.rest
          }
          e: for (var l in t)
            if (t.hasOwnProperty(l) && t[l]) {
              var o = t[l]
              o = 'Array' === n.util.type(o) ? o : [o]
              for (var s = 0; s < o.length; ++s) {
                var u = o[s],
                  g = u.inside,
                  c = !!u.lookbehind,
                  h = !!u.greedy,
                  f = 0,
                  d = u.alias
                if (h && !u.pattern.global) {
                  var p = u.pattern.toString().match(/[imuy]*$/)[0]
                  u.pattern = RegExp(u.pattern.source, p + 'g')
                }
                u = u.pattern || u
                for (var m = 0, y = 0; m < r.length; y += r[m].length, ++m) {
                  var v = r[m]
                  if (r.length > e.length) break e
                  if (!(v instanceof a)) {
                    u.lastIndex = 0
                    var b = u.exec(v),
                      k = 1
                    if (!b && h && m != r.length - 1) {
                      if (((u.lastIndex = y), (b = u.exec(e)), !b)) break
                      for (
                        var w = b.index + (c ? b[1].length : 0),
                          _ = b.index + b[0].length,
                          A = m,
                          P = y,
                          j = r.length;
                        j > A && _ > P;
                        ++A
                      )
                        (P += r[A].length), w >= P && (++m, (y = P))
                      if (r[m] instanceof a || r[A - 1].greedy) continue
                      ;(k = A - m), (v = e.slice(y, P)), (b.index -= y)
                    }
                    if (b) {
                      c && (f = b[1].length)
                      var w = b.index + f,
                        b = b[0].slice(f),
                        _ = w + b.length,
                        O = v.slice(0, w),
                        x = v.slice(_),
                        S = [m, k]
                      O && S.push(O)
                      var N = new a(l, g ? n.tokenize(b, g) : b, d, b, h)
                      S.push(N),
                        x && S.push(x),
                        Array.prototype.splice.apply(r, S)
                    }
                  }
                }
              }
            }
          return r
        },
        hooks: {
          all: {},
          add: function(e, t) {
            var a = n.hooks.all
            ;(a[e] = a[e] || []), a[e].push(t)
          },
          run: function(e, t) {
            var a = n.hooks.all[e]
            if (a && a.length) for (var r, i = 0; (r = a[i++]); ) r(t)
          },
        },
      }),
      a = (n.Token = function(e, t, n, a, r) {
        ;(this.type = e),
          (this.content = t),
          (this.alias = n),
          (this.length = 0 | (a || '').length),
          (this.greedy = !!r)
      })
    if (
      ((a.stringify = function(e, t, r) {
        if ('string' == typeof e) return e
        if ('Array' === n.util.type(e))
          return e
            .map(function(n) {
              return a.stringify(n, t, e)
            })
            .join('')
        var i = {
          type: e.type,
          content: a.stringify(e.content, t, r),
          tag: 'span',
          classes: ['token', e.type],
          attributes: {},
          language: t,
          parent: r,
        }
        if (
          ('comment' == i.type && (i.attributes.spellcheck = 'true'), e.alias)
        ) {
          var l = 'Array' === n.util.type(e.alias) ? e.alias : [e.alias]
          Array.prototype.push.apply(i.classes, l)
        }
        n.hooks.run('wrap', i)
        var o = Object.keys(i.attributes)
          .map(function(e) {
            return (
              e + '="' + (i.attributes[e] || '').replace(/"/g, '&quot;') + '"'
            )
          })
          .join(' ')
        return (
          '<' +
          i.tag +
          ' class="' +
          i.classes.join(' ') +
          '"' +
          (o ? ' ' + o : '') +
          '>' +
          i.content +
          '</' +
          i.tag +
          '>'
        )
      }),
      !_self.document)
    )
      return _self.addEventListener
        ? (_self.addEventListener(
            'message',
            function(e) {
              var t = JSON.parse(e.data),
                a = t.language,
                r = t.code,
                i = t.immediateClose
              _self.postMessage(n.highlight(r, n.languages[a], a)),
                i && _self.close()
            },
            !1,
          ),
          _self.Prism)
        : _self.Prism
    var r =
      document.currentScript ||
      [].slice.call(document.getElementsByTagName('script')).pop()
    return (
      r &&
        ((n.filename = r.src),
        document.addEventListener &&
          !r.hasAttribute('data-manual') &&
          ('loading' !== document.readyState
            ? window.requestAnimationFrame
              ? window.requestAnimationFrame(n.highlightAll)
              : window.setTimeout(n.highlightAll, 16)
            : document.addEventListener('DOMContentLoaded', n.highlightAll))),
      _self.Prism
    )
  })()
'undefined' != typeof module && module.exports && (module.exports = Prism),
  'undefined' != typeof global && (global.Prism = Prism)
;(Prism.languages.markup = {
  comment: /<!--[\w\W]*?-->/,
  prolog: /<\?[\w\W]+?\?>/,
  doctype: /<!DOCTYPE[\w\W]+?>/i,
  cdata: /<!\[CDATA\[[\w\W]*?]]>/i,
  tag: {
    pattern: /<\/?(?!\d)[^\s>\/=$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i,
    inside: {
      tag: {
        pattern: /^<\/?[^\s>\/]+/i,
        inside: { punctuation: /^<\/?/, namespace: /^[^\s>\/:]+:/ },
      },
      'attr-value': {
        pattern: /=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i,
        inside: { punctuation: /[=>"']/ },
      },
      punctuation: /\/?>/,
      'attr-name': {
        pattern: /[^\s>\/]+/,
        inside: { namespace: /^[^\s>\/:]+:/ },
      },
    },
  },
  entity: /&#?[\da-z]{1,8};/i,
}),
  Prism.hooks.add('wrap', function(a) {
    'entity' === a.type &&
      (a.attributes.title = a.content.replace(/&amp;/, '&'))
  }),
  (Prism.languages.xml = Prism.languages.markup),
  (Prism.languages.html = Prism.languages.markup),
  (Prism.languages.mathml = Prism.languages.markup),
  (Prism.languages.svg = Prism.languages.markup)
;(Prism.languages.css = {
  comment: /\/\*[\w\W]*?\*\//,
  atrule: { pattern: /@[\w-]+?.*?(;|(?=\s*\{))/i, inside: { rule: /@[\w-]+/ } },
  url: /url\((?:(["'])(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,
  selector: /[^\{\}\s][^\{\};]*?(?=\s*\{)/,
  string: {
    pattern: /("|')(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1/,
    greedy: !0,
  },
  property: /(\b|\B)[\w-]+(?=\s*:)/i,
  important: /\B!important\b/i,
  function: /[-a-z0-9]+(?=\()/i,
  punctuation: /[(){};:]/,
}),
  (Prism.languages.css.atrule.inside.rest = Prism.util.clone(
    Prism.languages.css,
  )),
  Prism.languages.markup &&
    (Prism.languages.insertBefore('markup', 'tag', {
      style: {
        pattern: /(<style[\w\W]*?>)[\w\W]*?(?=<\/style>)/i,
        lookbehind: !0,
        inside: Prism.languages.css,
        alias: 'language-css',
      },
    }),
    Prism.languages.insertBefore(
      'inside',
      'attr-value',
      {
        'style-attr': {
          pattern: /\s*style=("|').*?\1/i,
          inside: {
            'attr-name': {
              pattern: /^\s*style/i,
              inside: Prism.languages.markup.tag.inside,
            },
            punctuation: /^\s*=\s*['"]|['"]\s*$/,
            'attr-value': { pattern: /.+/i, inside: Prism.languages.css },
          },
          alias: 'language-css',
        },
      },
      Prism.languages.markup.tag,
    ))
Prism.languages.clike = {
  comment: [
    { pattern: /(^|[^\\])\/\*[\w\W]*?\*\//, lookbehind: !0 },
    { pattern: /(^|[^\\:])\/\/.*/, lookbehind: !0 },
  ],
  string: {
    pattern: /(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
    greedy: !0,
  },
  'class-name': {
    pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i,
    lookbehind: !0,
    inside: { punctuation: /(\.|\\)/ },
  },
  keyword: /\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
  boolean: /\b(true|false)\b/,
  function: /[a-z0-9_]+(?=\()/i,
  number: /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i,
  operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,
  punctuation: /[{}[\];(),.:]/,
}
;(Prism.languages.javascript = Prism.languages.extend('clike', {
  keyword: /\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,
  number: /\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/,
  function: /[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i,
  operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*\*?|\/|~|\^|%|\.{3}/,
})),
  Prism.languages.insertBefore('javascript', 'keyword', {
    regex: {
      pattern: /(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/,
      lookbehind: !0,
      greedy: !0,
    },
  }),
  Prism.languages.insertBefore('javascript', 'string', {
    'template-string': {
      pattern: /`(?:\\\\|\\?[^\\])*?`/,
      greedy: !0,
      inside: {
        interpolation: {
          pattern: /\$\{[^}]+\}/,
          inside: {
            'interpolation-punctuation': {
              pattern: /^\$\{|\}$/,
              alias: 'punctuation',
            },
            rest: Prism.languages.javascript,
          },
        },
        string: /[\s\S]+/,
      },
    },
  }),
  Prism.languages.markup &&
    Prism.languages.insertBefore('markup', 'tag', {
      script: {
        pattern: /(<script[\w\W]*?>)[\w\W]*?(?=<\/script>)/i,
        lookbehind: !0,
        inside: Prism.languages.javascript,
        alias: 'language-javascript',
      },
    }),
  (Prism.languages.js = Prism.languages.javascript)
!(function() {
  'undefined' != typeof self &&
    self.Prism &&
    self.document &&
    Prism.hooks.add('complete', function(e) {
      if (e.code) {
        var t = e.element.parentNode,
          s = /\s*\bline-numbers\b\s*/
        if (
          t &&
          /pre/i.test(t.nodeName) &&
          (s.test(t.className) || s.test(e.element.className)) &&
          !e.element.querySelector('.line-numbers-rows')
        ) {
          s.test(e.element.className) &&
            (e.element.className = e.element.className.replace(s, '')),
            s.test(t.className) || (t.className += ' line-numbers')
          var n,
            a = e.code.match(/\n(?!$)/g),
            l = a ? a.length + 1 : 1,
            r = new Array(l + 1)
          ;(r = r.join('<span></span>')),
            (n = document.createElement('span')),
            n.setAttribute('aria-hidden', 'true'),
            (n.className = 'line-numbers-rows'),
            (n.innerHTML = r),
            t.hasAttribute('data-start') &&
              (t.style.counterReset =
                'linenumber ' +
                (parseInt(t.getAttribute('data-start'), 10) - 1)),
            e.element.appendChild(n)
        }
      }
    })
})()
!(function() {
  if ('undefined' != typeof self && self.Prism && self.document) {
    var t = [],
      e = {},
      n = function() {}
    Prism.plugins.toolbar = {}
    var a = (Prism.plugins.toolbar.registerButton = function(n, a) {
        var o
        ;(o =
          'function' == typeof a
            ? a
            : function(t) {
                var e
                return (
                  'function' == typeof a.onClick
                    ? ((e = document.createElement('button')),
                      (e.type = 'button'),
                      e.addEventListener('click', function() {
                        a.onClick.call(this, t)
                      }))
                    : 'string' == typeof a.url
                      ? ((e = document.createElement('a')), (e.href = a.url))
                      : (e = document.createElement('span')),
                  (e.textContent = a.text),
                  e
                )
              }),
          t.push((e[n] = o))
      }),
      o = (Prism.plugins.toolbar.hook = function(a) {
        var o = a.element.parentNode
        if (
          o &&
          /pre/i.test(o.nodeName) &&
          !o.classList.contains('code-toolbar')
        ) {
          o.classList.add('code-toolbar')
          var r = document.createElement('div')
          r.classList.add('toolbar'),
            document.body.hasAttribute('data-toolbar-order') &&
              (t = document.body
                .getAttribute('data-toolbar-order')
                .split(',')
                .map(function(t) {
                  return e[t] || n
                })),
            t.forEach(function(t) {
              var e = t(a)
              if (e) {
                var n = document.createElement('div')
                n.classList.add('toolbar-item'),
                  n.appendChild(e),
                  r.appendChild(n)
              }
            }),
            o.appendChild(r)
        }
      })
    a('label', function(t) {
      var e = t.element.parentNode
      if (e && /pre/i.test(e.nodeName) && e.hasAttribute('data-label')) {
        var n,
          a,
          o = e.getAttribute('data-label')
        try {
          a = document.querySelector('template#' + o)
        } catch (r) {}
        return (
          a
            ? (n = a.content)
            : (e.hasAttribute('data-url')
                ? ((n = document.createElement('a')),
                  (n.href = e.getAttribute('data-url')))
                : (n = document.createElement('span')),
              (n.textContent = o)),
          n
        )
      }
    }),
      Prism.hooks.add('complete', o)
  }
})()
!(function() {
  if ('undefined' != typeof self && self.Prism && self.document) {
    if (!Prism.plugins.toolbar)
      return (
        console.warn('Show Languages plugin loaded before Toolbar plugin.'),
        void 0
      )
    var e = {
      html: 'HTML',
      xml: 'XML',
      svg: 'SVG',
      mathml: 'MathML',
      css: 'CSS',
      clike: 'C-like',
      javascript: 'JavaScript',
      abap: 'ABAP',
      actionscript: 'ActionScript',
      apacheconf: 'Apache Configuration',
      apl: 'APL',
      applescript: 'AppleScript',
      asciidoc: 'AsciiDoc',
      aspnet: 'ASP.NET (C#)',
      autoit: 'AutoIt',
      autohotkey: 'AutoHotkey',
      basic: 'BASIC',
      csharp: 'C#',
      cpp: 'C++',
      coffeescript: 'CoffeeScript',
      'css-extras': 'CSS Extras',
      fsharp: 'F#',
      glsl: 'GLSL',
      graphql: 'GraphQL',
      http: 'HTTP',
      inform7: 'Inform 7',
      json: 'JSON',
      latex: 'LaTeX',
      livescript: 'LiveScript',
      lolcode: 'LOLCODE',
      matlab: 'MATLAB',
      mel: 'MEL',
      nasm: 'NASM',
      nginx: 'nginx',
      nsis: 'NSIS',
      objectivec: 'Objective-C',
      ocaml: 'OCaml',
      parigp: 'PARI/GP',
      php: 'PHP',
      'php-extras': 'PHP Extras',
      powershell: 'PowerShell',
      properties: '.properties',
      protobuf: 'Protocol Buffers',
      jsx: 'React JSX',
      rest: 'reST (reStructuredText)',
      sas: 'SAS',
      sass: 'Sass (Sass)',
      scss: 'Sass (Scss)',
      sql: 'SQL',
      typescript: 'TypeScript',
      vhdl: 'VHDL',
      vim: 'vim',
      wiki: 'Wiki markup',
      xojo: 'Xojo (REALbasic)',
      yaml: 'YAML',
    }
    Prism.plugins.toolbar.registerButton('show-language', function(t) {
      var a = t.element.parentNode
      if (a && /pre/i.test(a.nodeName)) {
        var s =
            a.getAttribute('data-language') ||
            e[t.language] ||
            t.language.substring(0, 1).toUpperCase() + t.language.substring(1),
          r = document.createElement('span')
        return (r.textContent = s), r
      }
    })
  }
})()
!(function() {
  if ('undefined' != typeof self && self.Prism && self.document) {
    if (!Prism.plugins.toolbar)
      return (
        console.warn('Copy to Clipboard plugin loaded before Toolbar plugin.'),
        void 0
      )
    var o = window.Clipboard || void 0
    o || 'function' != typeof require || (o = require('clipboard'))
    var e = []
    if (!o) {
      var t = document.createElement('script'),
        n = document.querySelector('head')
      ;(t.onload = function() {
        if ((o = window.Clipboard)) for (; e.length; ) e.pop()()
      }),
        (t.src =
          'https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/1.5.8/clipboard.min.js'),
        n.appendChild(t)
    }
    Prism.plugins.toolbar.registerButton('copy-to-clipboard', function(t) {
      function n() {
        var e = new o(i, {
          text: function() {
            return t.code
          },
        })
        e.on('success', function() {
          ;(i.textContent = 'Copied!'), r()
        }),
          e.on('error', function() {
            ;(i.textContent = 'Press Ctrl+C to copy'), r()
          })
      }
      function r() {
        setTimeout(function() {
          i.textContent = 'Copy'
        }, 5e3)
      }
      var i = document.createElement('a')
      return (i.textContent = 'Copy'), o ? n() : e.push(n), i
    })
  }
})()
